// Â© 2020 ANSYS, Inc.  Unauthorized use, distribution, or duplication is prohibited.
//
// The APIs in this service should only be used for Sherlock integration with Workbench.
syntax = "proto3";

import "SherlockCommonService.proto";

option java_package = "sherlock.grpc";
option java_outer_classname = "SherlockServiceProto";

message OpenProjectRequest {
  string directory = 1;
}

message SaveProjectRequest {
  string directory = 1;
}

message ExportRequest {
  string exportCcaName 		= 1;
  string destGeometryFile 	= 2;
  string systemName 		= 3;
  string componentName 		= 4;
  enum ExportAnalysis {
    NF 		= 0;
    HV 		= 1;
    ICT 	= 2;
    SH 		= 3;
    RV 		= 4;
  }
  ExportAnalysis analysis 	= 5;
}

message ImportRequest {
  string resultFile		= 1;
  string projectName	= 2;
  string ccaName		= 3;
  enum ImportAnalysis {
    NaturalFreq 		= 0;
    HarmonicVibe 		= 1;
    ICTAnalysis 		= 2;
    MechanicalShock 	= 3;
    RandomVibe 			= 4;
  }
  ImportAnalysis analysis = 4;
  string modalResultFile = 5;
  string phaseName		= 6;			// The life cycle phase of the event associated with the results file.
  string eventName		= 7;			// The life cycle event associated with the results file.
}

message GetCCARequest {
}

message GetCCAResponse {
  ReturnCode returnCode = 1;
  repeated string ccaNames = 2;
}

message ExportTraceReinforcementRequest {
  string exportCcaName 		= 1;
  string destGeometryFile 	= 2;
  string systemName 		= 3;
  string componentName 		= 4;
}

message SetWorkingDirRequest {
  string directory = 1;
}

service SherlockService {
  // Opens specific Sherlock project given the full path
  rpc openProject(OpenProjectRequest) returns (ReturnCode);

  // Saves all Sherlock project files given the destination path
  rpc saveProject(SaveProjectRequest) returns (ReturnCode);
  
  // Export request for geometry and materials given the full destination directory and file names
  rpc export(ExportRequest) returns (ReturnCode);
  
  // Request for Sherlock to import the given .rst file
  rpc importRst(ImportRequest) returns (ReturnCode);

  // Returns a list of circuit board names given a project name
  rpc getCCA(GetCCARequest) returns (GetCCAResponse);
  
  // Export Trace Reinforcement model request given the full destination directory and file names
  rpc exportTraceReinforcement(ExportTraceReinforcementRequest) returns (ReturnCode);
  
  // Check if all SherlockClient is still loading
  rpc isSherlockClientLoading(IsSherlockClientLoadingRequest) returns (ReturnCode);
  
  // Set working directory. 
  // In the case where there is not already a project loaded in Sherlock, this API sets the default project directory for any new project created.
  // In the case where there is already a project loaded in Sherlock, this API reloads the project from the new directory provided and refreshes the Sherlock UI.
  rpc setWorkingDir(SetWorkingDirRequest) returns (ReturnCode);
}
